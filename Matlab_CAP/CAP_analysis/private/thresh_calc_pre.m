function [error] = thresh_calc(handles)error = [];for i = 1:20    eval(['set(handles.abrs.abr' num2str(i) ' ,''Visible'',''off'');']);    eval(['set(handles.rwins.rwin' num2str(i) ' ,''Visible'',''off'');']);    eval(['set(handles.bwins.bwin' num2str(i) ' ,''Visible'',''off'');']);endset(handles.ax1.line1,'Visible','off');set(handles.ax1.line2,'Visible','off');set(handles.ax1.line3,'Visible','off');cur_dir = cd(fullfile(handles.data_path,handles.params.dir));CalibFile = ['cal_p00' get(handles.cal_pic,'String')];while length(CalibFile) > 10,    CalibFile = strrep(CalibFile,'p0','p');endif ~exist([CalibFile],'file')    CalibFile = 'p0001_calib';endcommand_line = sprintf('%s%s%c','[xcal]=',CalibFile,';');eval(command_line);%parse ABR picture sequence[picnums] = ParseInputPicString(get(handles.abr_pic,'String'));analysis_fnam = ['CAP_analysis_p' strrep(get(handles.abr_pic,'String'),'-','_') '.m'];num_files = length(picnums);ABRmag = zeros(num_files,6);max_resp = 0;for file = 1:num_files    index = picnums(file);    EPfile = ['EPavg_p00' num2str(index)];    while length(EPfile) > 10,        EPfile = strrep(EPfile,'p0','p');    end    if ~exist([EPfile],'file')        warndlg([EPfile ' not found in data directory.']);        return    end    command_line = sprintf('%s%s%c','[x]=',EPfile,';');    eval(command_line);    if file == 1        ButtonName = [];        eflag.freq_hz = 0;        eflag.db_atten = 0;        eflag.masker_present = 0;        eflag.masker_freq_hz = 0;        eflag.masker_db_atten = 0;        eflag.masker_delay_ms = 0;        set(handles.axes2,'xlim',[0 max(x.AverageData(:,1))]);        freq_check = x.Stimuli.freq_hz;        db_atten_check = x.Stimuli.db_atten;        masker_freq_check = x.Stimuli.masker_freq_hz;        masker_atten_check = x.Stimuli.masker_db_atten;        masker_delay_check = x.Stimuli.masker_delay_ms;        DATE_STR = x.General.date;        DATE_STR = x.General.date;        speaker_test = x.Hardware.speaker;        if strncmpi(speaker_test,'cr',2) | strncmpi(speaker_test,'fo',2)            volt_test = x.Hardware.amp_vlt;            speaker_cal = x.Hardware.speaker;            volt_cal = xcal.Hardware.amp_vlt;            if freq_check,                freq_loc = find(xcal.CalibData(:,1)>=(freq_check/1000));                freq_lev = xcal.CalibData(freq_loc(1),2) + 20*log10(volt_test/volt_cal);            else                %calibration on 2/20/07 recorded in protocol book #247                %using click peak equivalent SPL                %                %matching tone peak voltage required 10 dB more atten at 8k                %must subtract 10 db from tone calib and add 3 dB for RMS                %                %also correct for any difference in crown amplifier voltages                %between cal and test files                %                %see Burkhard (1984) for details                freq_loc = find(xcal.CalibData(:,1)>=8);                freq_lev = xcal.CalibData(freq_loc(1),2) + 20*log10(volt_test/volt_cal) ...                    -10 +3;            end        elseif strncmpi(speaker_test,'ed',2)            if freq_check,                freq_loc = find(xcal.CalibData(:,1)>=(freq_check/1000));                freq_lev = xcal.CalibData(freq_loc(1),2);            else                %calibration on 2/23/07 recorded in protocol book #247                %using click peak equivalent SPL                %                %matching tone peak voltage required 5 dB more atten at 8k                %must subtract 5 db from tone calib and add 3 dB for RMS                %                %see Burkhard (1984) for details                freq_loc = find(xcal.CalibData(:,1)>=8);                freq_lev = xcal.CalibData(freq_loc(1),2)-5+3;            end        elseif strncmpi(speaker_test,'on',2)||strncmpi(speaker_test,'ta',2)            if freq_check,                freq_loc = find(xcal.CalibData(:,1)>=(freq_check/1000));                freq_lev = xcal.CalibData(freq_loc(1),2);            else                %calibration on 8/22/07 recorded in protocol book #247                %using click peak equivalent SPL                %                %matching tone peak voltage required 4 dB less atten at 2k                %must add 4 db from tone calib and add 3 dB for RMS                %                %see Burkhard (1984) for details                z = xcal.CalibData(1,1)                freq_loc = find(xcal.CalibData(:,1)>=2);                freq_lev = xcal.CalibData(freq_loc(1),2)+4+3;            end        else            warndlg('Speaker ID not found!','Analysis Error');            return        end    end    if x.Stimuli.freq_hz ~= freq_check,        eflag.freq_hz = 1;    end    if x.Stimuli.db_atten ~= db_atten_check,        eflag.db_atten = 1;    end    if eflag.freq_hz,        warndlg('Different signal frequencies.');        return    elseif eflag.masker_freq_hz,        warndlg('Different masker frequencies.');        return    end    if strncmpi(get(handles.start_resp,'String'),'a',1)        start_resp(file) = 1;    else        start_resp(file) = str2double(get(handles.start_resp,'String'));    end    if strncmpi(get(handles.window_resp,'String'),'a',1)        window_resp = 5;    else        window_resp = str2double(get(handles.window_resp,'String'));    end    if strncmpi(get(handles.window_back,'String'),'a',1)        window_back = 5;    else        window_back = str2double(get(handles.window_back,'String'));    end    if strncmpi(get(handles.start_back,'String'),'a',1)        start_back(file) = x.Stimuli.record_duration - window_back;    else        start_back(file) = str2double(get(handles.start_back,'String'));    end    end_resp(file) = start_resp(file)+window_resp;    end_back(file) = start_back(file)+window_back;    plotx(:,file) =  x.AverageData(:,1);    ploty(:,file) =  x.AverageData(:,4);    fstrsp = max(find(x.AverageData(:,1)<=start_resp(file)));    lstrsp = min(find(x.AverageData(:,1)>=end_resp(file)));    fstbck = max(find(x.AverageData(:,1)<=start_back(file)));    lstbck = min(find(x.AverageData(:,1)>=end_back(file)));    ABRmag(file,1) = freq_lev - x.Stimuli.db_atten;    ABRmag(file,2) = max(x.AverageData(fstrsp:lstrsp,4)) - min(x.AverageData(fstrsp:lstrsp,4));    ABRmag(file,3) = max(x.AverageData(fstbck:lstbck,4)) - min(x.AverageData(fstbck:lstbck,4));    if isfinite(x.Stimuli.masker_freq_hz)        ABRmag(file,5) = masker_lev - x.Stimuli.masker_db_atten;        ABRmag(file,6) = x.Stimuli.masker_delay_ms;    endendparam_of_interest = 1;set(handles.ax2.ylab,'String','Signal level (dB SPL)');if strncmpi(get(handles.scale,'String'),'a',1)    max_resp = max(ABRmag(:,2));else    max_resp = str2double(get(handles.scale,'String'));end[y,stack] = sort(ABRmag(:,param_of_interest));for file = 1:num_files    index = stack(file);    offset = max_resp * file - mean(mean(ploty)); %remove DC and shift by max response    xdat = plotx(:,index);    ydat = ploty(:,index) + offset;    eval(['set(handles.abrs.abr' num2str(file) ',''xdata'',xdat,''ydata'',ydat,''Visible'',''on'');']);    xdat1 = [start_resp(index) end_resp(index) end_resp(index) start_resp(index) start_resp(index)];    xdat2 = [start_back(index) end_back(index) end_back(index) start_back(index) start_back(index)];    ymin = mean(ydat)-max_resp/2.2;    ymax = mean(ydat)+max_resp/2.2;    ydat = [ymin ymin ymax ymax ymin];    eval(['set(handles.rwins.rwin' num2str(file) ',''xdata'',xdat1,''ydata'',ydat,''Visible'',''on'');']);    eval(['set(handles.bwins.bwin' num2str(file) ',''xdata'',xdat2,''ydata'',ydat,''Visible'',''on'');']);endset(handles.axes2,'YLim',[0 max_resp*(num_files+1)],'YTick',[max_resp:max_resp:max_resp*num_files],'YTickLabel',round(y));hold off;thresh_mag = mean(ABRmag(:,3)) + 2*std(ABRmag(:,3));ABRmag(1:num_files,4) = thresh_mag;ABRmag = sortrows(ABRmag,param_of_interest);yes_thresh = 0;for index = 1:num_files-1,    if (ABRmag(index,2) <= thresh_mag) & (ABRmag(index+1,2) >= thresh_mag), %find points that bracket 50% hit rate        pts = index;        yes_thresh = 1;    endend%calculate thresholdif yes_thresh,    hi_loc  = ABRmag(pts,  1);    lo_loc  = ABRmag(pts+1,1);    hi_resp = ABRmag(pts,  2);    lo_resp = ABRmag(pts+1,2);    slope  = (thresh_mag - lo_resp) / (hi_resp - lo_resp);    thresh_lev = slope * (hi_loc - lo_loc) + lo_loc;else    thresh_lev = NaN;end%plot mag functionsset(handles.axes1,'ylim',[0 1.1*max_resp]);set(handles.ax1.line1,'xdata',ABRmag(:,param_of_interest),'ydata',ABRmag(:,2),'Visible','on');set(handles.ax1.line2,'xdata',ABRmag(:,param_of_interest),'ydata',ABRmag(:,3),'Visible','on');set(handles.ax1.line3,'xdata',ABRmag(:,param_of_interest),'ydata',ABRmag(:,4),'Visible','on');set(handles.ax1.xlab,'String','Signal level (dB SPL)');set(handles.axes1,'xscale','linear');set(handles.ax2.ylab,'String','Signal level (dB SPL)');if freq_check,    text1 = sprintf('%4.1f %s %4.1f %s',freq_check/1000,'kHz tone threshold is',thresh_lev,'dB SPL');else    text1 = sprintf('%s %4.1f %s','Click threshold is',thresh_lev,'dB peak level');endset(handles.ax1.title,'string',text1);drawnow;%write output to file for future analysisfilename = fullfile(handles.data_path,handles.params.dir,analysis_fnam);fid = fopen(filename,'wt+');fprintf(fid,'%s\n\n','%CAP Analysis Results');fprintf(fid,'%s %s\n\n','function x =',strtok(analysis_fnam,'.m'));fprintf(fid,'%s%s %s\n','x = struct(''Stimuli'',{struct(''cal_pic'',''',get(handles.cal_pic,'String'),'''...');fprintf(fid,'%s%s %s\n',',''abr_pic'',''',get(handles.abr_pic,'String'),'''...');if strncmpi(get(handles.start_resp,'String'),'a',1)    fprintf(fid,'%s\n',',''start_resp'',''auto''...');else    fprintf(fid,'%s%s %s\n',',''start_resp'',''',get(handles.start_resp,'String'),'''...');endif strncmpi(get(handles.window_resp,'String'),'a',1)    fprintf(fid,'%s\n',',''window_resp'',''auto''...');else    fprintf(fid,'%s%s %s\n',',''window_resp'',''',get(handles.window_resp,'String'),'''...');endif strncmpi(get(handles.start_back,'String'),'a',1)    fprintf(fid,'%s\n',',''start_back'',''auto''...');else    fprintf(fid,'%s%s %s\n',',''start_back'',''',get(handles.start_back,'String'),'''...');endif strncmpi(get(handles.window_back,'String'),'a',1)    fprintf(fid,'%s\n',',''window_back'',''auto''...');else    fprintf(fid,'%s%s %s\n',',''window_back'',''',get(handles.window_back,'String'),'''...');endif strncmpi(get(handles.scale,'String'),'a',1)    fprintf(fid,'%s\n',',''scale'',''auto''...');else    fprintf(fid,'%s%s %s\n',',''scale'',''',get(handles.scale,'String'),'''...');endfprintf(fid,'%s%s %s\n',',''dir'',''',handles.params.dir,'''...');fprintf(fid,'%s\n',')} ...');fprintf(fid,'%s\n%s',',''ABRmag'', {[...','%');[r,c] = size(ABRmag);labs = {'StmLev' 'CAPmag' 'BACmag' 'TwoSDs' 'MasLev' 'MasDel' 'REFmag' 'RECmag' 'kHz'};for index = 1:c    fprintf(fid,' %s',char(labs(index)));endfor index = 1:r    fprintf(fid,'\n%s','[');    fprintf(fid,'%7.2f',ABRmag(index,:));    fprintf(fid,'%s','];');endfprintf(fid,'\n%s\n',']});');fclose(fid);% end GetAllPics subfunction%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~function [picnums] = ParseInputPicString(picst)% Takes the input number string (eg, '5-7,9') and turns it into an array% of picture numbers, picnums=[5,6,7,9]c='0';i=0;j=1;numpics=1;dashflag=0;while i<length(picst)    while c~='-' & c~=',' & i+j~=length(picst)+1        b(j)=picst(i+j);        c=b(j);        j=j+1;    end    if c=='-' | c==','        b=b(1:end-1);    end    if dashflag==1        try            upto=str2double(b);        catch            error('Can''t parse picture numbers.');        end        numdash=upto-picnums(numpics-1);        for k=1:numdash            picnums(k+numpics-1)=picnums(numpics-1)+k;        end        numpics=length(picnums);    else  % if dashflag==1        try            picnums(numpics)=str2double(b);        catch            error('Can''t parse picture numbers!\n');        end    end    clear b;    i=i+j-1;    j=1;    if c=='-'        dashflag=1;    else        dashflag=0;    end    c='0';    numpics=numpics+1;end  % while i<length(picst)